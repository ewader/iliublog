<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>内网穿透 on 图南博客</title>
    <link>https://iliu.org/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</link>
    <description>Recent content in 内网穿透 on 图南博客</description>
    <image>
      <title>图南博客</title>
      <url>https://iliu.org/papermod-cover.png</url>
      <link>https://iliu.org/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 12 Nov 2023 17:23:22 +0800</lastBuildDate><atom:link href="https://iliu.org/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在群晖中使用tailscale实现内网穿透</title>
      <link>https://iliu.org/Using-tailscale-to-achieve-intranet-penetration-in-Synology/</link>
      <pubDate>Sun, 12 Nov 2023 17:23:22 +0800</pubDate>
      
      <guid>https://iliu.org/Using-tailscale-to-achieve-intranet-penetration-in-Synology/</guid>
      <description>在远程连接群晖的实践中，老刘一切介绍过zerotier和IPv6。但是实际的使用过程中，zerotier有时候握手的速度很慢，而且配置起来比较麻烦，IPv6很好，速度也快，但是有些环境中还只有IPv4，直到我听别人介绍到tailscale这个软件。它的工作原理其实和zerotier差不多，但是不需要什么复杂的设置，直接注册、登录，同一个账号的所有设备都连接到一起了。
注册tailscale 百度直接搜，或者打看tailscale官方网站。注册就行，不过它不支持自由注册，需要用Google、apple、或者微软的outlook账号注册。
下载tailscale 网页的右上角，有个downloads，点击就可以了。里面有常用的Windows、Linux等的客户端，直接点击下载相应的客户端，并安装。安装后登录，然后在个人中心里，系统自动给你分配了一个ip地址，如果你要了解某个设备，直接在浏览器里打开那个ip地址就好了。
如果你的系统没有在常用的客户端页面，可以点击这里，会进入一个所有的客户端的页面，找到你的系统下载即可。
群晖中安装 点击我上面说的那个连接，然后找到群晖的客户端。根据你群晖的系统选。如果你群晖是DSM6就选6，DSM7就选7，不要选错了。下载之后进入群晖的后台，进入套件中心，点击手动安装。 安装的时候DSM会有一些权限的提示，选择允许就行了。安装后打开套件，点connect那个黑色的按钮，登录你的账号就可以了。
Linux里安装与使用 也是选择合适系统的客户端，下载安装，如果你用的Arch Linux系列，可以直接用命令安装：
yay tailscale 安装完之后，和windows下不同的是，它没有一个UI，需要你在命令里进行登录。 首先，运行tailscale：
sudo systemctl start tailscaled 然后登录：
sudo tailscale login 会给你网址，点击这个网址，用你的账号登录即可。
登录后使用命令查看目前在线的设备：
tailscale status 找到群晖的ip地址，选中复制，粘贴到浏览器里，打开，是不是熟悉的群晖后台出现了？
后续的一些优化 如果是你经常用的设备，你不想让这个设备的ip地址发生变化，可以进行一点小小的设置，如下图： 但让，tailscale还有一些高级的用法，比如在路由器里安装后，其他设备不用安装也能相互访问，这个有点折腾了，不在本文的范围，有兴趣的朋友可以去官方看相关教程。</description>
    </item>
    
    <item>
      <title>zerotier加openwrt路由实现内网穿透控制群晖</title>
      <link>https://iliu.org/3356.html</link>
      <pubDate>Sat, 24 Oct 2020 07:49:34 +0000</pubDate>
      
      <guid>https://iliu.org/3356.html</guid>
      <description>刚开始完群晖的时候，写过一片使用zerotier进行内网穿透实现连接群晖的功能。详情《使用zerotier进行内网穿透 》但是后来升级移动宽带，带了一个光猫的路由，导致群晖成为了内网中的内网，使用zerotier总链接不上。因此，改用了frp进行内网穿透。
FRP和zerotier各有千秋，本站也一些文章来结束这些，有兴趣可以利用搜索来查询。昨天，发现路由器里带的又zerotier的插件。其实以前也见到过，只是觉得只是控制路由器，用处不大，所以也没有过多的理会。昨天，突发奇想，是不是在两台路由器都设置zerotier的情况下，能实现各自路由下的设备能访问另一台路由下的设备。网上查了一下，发现是可行的。而且，设置起来也要简单的多。
首先，注册zerotier 这里就不在多说了，上面那篇文章有说明如何注册。
在公司和家中的两台路由内都设置zerotier。 这个网上有一堆的教程，又是设置端口的，又是设置防火墙的。其实那都已经很老了，目前的的插件简单不能再简单了。
如果上图，填入zero的 id 勾选下面的运行客户端NAT。不需要在设置别的了。
进入zero控制台，设置路由 在下面add routes里进行添加 前面是你路由器的IP段，后面是zero给你分配的ip，千万不要填反了。在设置的时候要注意，家里和办公司的IP不能一致。其他的就没有关系了。设置完之后，就可以在办公室输入家里设备的IP或者在家里输入办公室设备的IP进行控制了。</description>
    </item>
    
    <item>
      <title>纯代码设置frp服务器</title>
      <link>https://iliu.org/3340.html</link>
      <pubDate>Sun, 18 Oct 2020 07:27:04 +0000</pubDate>
      
      <guid>https://iliu.org/3340.html</guid>
      <description>以前老刘写过《宝塔面板安装FRP内网穿透控制群晖》的文章，最近发现不知道是这个插件的作者不再开发了还是其他的原因，xeath开发的这个frp服务器插件已经在商店里找不到了。其实，这也没什么，直接用代码的方式部署也是可以的。
SSH连接到VPS之后运行如下命令查看处理器架构，根据架构下载不同版本的frp
arch 查看结果，如果是“X86_64“即可选择”amd64”，
运行如下命令，根据架构不同，选择相应版本并进行下载，然后登陆frp的官网地址，现在最新的应该是0.34.1，所以，运行如下的命令：
wget https://github.com/fatedier/frp/releases/download/v0.34.1/frp_0.34.1_linux_amd64.tar.gz 然后解压，给文件换一个名字，进入frp目录
tar -zxvf frp_0.34.1_linux_amd64.tar.gz cp -r frp_0.34.1_linux_amd64 frp cd frp 修改frps.ini文件
vim frps.ini 格式如下：
[common] bind_port = 7000 dashboard_port = 7500 token = *******（根据情况自己设置） dashboard_user = 自己设置 dashboard_pwd = 自己设置 vhost_http_port = 10080 vhost_https_port = 10443 编辑完成后保存（vim保存如果不会请自行搜索）。
之后我们就可以运行frps的服务端了。
使用命令：
./frps -c frps.ini 如果输出如下文字，说明服务器配置成功
2019/01/12 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:7000 2019/01/12 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:10080 2019/01/12 15:22:39 [I] [service.</description>
    </item>
    
  </channel>
</rss>
